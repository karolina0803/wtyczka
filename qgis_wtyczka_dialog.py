# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaQGISDialog
                                 A QGIS plugin
 Obliczenie różnicy wysokości pomiędzy punktami lub obliczenie pola powierzchni metodą Gaussa.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Weronika Zienkiewicz, Karolina Żuber
        email                : weronika.zienkiewicz.stud@pw.edu.pl, karolina.zuber.stud@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsPointXY
from qgis.core import QgsFeature, QgsGeometry, QgsVectorLayer, QgsField
from PyQt5.QtCore import QVariant
from qgis.core import QgsField, QgsFields, QgsFeature, QgsGeometry, QgsVectorLayer, QgsProject
from qgis.core import QgsPalLayerSettings, QgsVectorLayerSimpleLabeling

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgis_wtyczka_dialog_base.ui'))


class WtyczkaQGISDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaQGISDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_calculate_deltaH.clicked.connect(self.calculate_deltaH)
        self.pushButton_calculate_pole.clicked.connect(self.calculate_pole)
        self.pushButton_calculate_pole_m2.clicked.connect(self.wyswietlanie_m2)
        self.pushButton_calculate_pole_ha.clicked.connect(self.wyswietlanie_ha)
        self.pushButton_calculate_pole_ar.clicked.connect(self.wyswietlanie_ary)
        self.pushButton_close.clicked.connect(self.zakoncz_dzialanie)
        self.pushButton_clear.clicked.connect(self.wyczysc_i_kontynuuj)
        
    def calculate_deltaH(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        if len(selected_features)!=2:
            self.label_3_result.setText(f"wybierz dwa punkty do przewyższenia, wybrano {len(selected_features)}\n sprawdź, czy wybrano dobrą warstwę")
        else:
            h_1 = float(selected_features[0]['wysokosc'])
            h_2 = float(selected_features[1]['wysokosc'])
            d_h = h_2 - h_1
            id1 = selected_features[0].id()
            id2 = selected_features[1].id()
            
            self.label_3_result_2.setText(f"{id1}; {id2}")
            self.label_3_result.setText(f"{d_h:.3f} m")
        self.add_labels_to_layer(current_layer)    
        
    def calculate_pole(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        selected_features = current_layer.selectedFeatures()
        if len(selected_features)<3:
            self.label_3_result.setText(f"wybierz co najmniej 3 punkty do obliczenia pola, wybrano {len(selected_features)}\n sprawdź, czy wybrano dobrą warstwę")
        else:
            obiekty = selected_features
            punkty = []
            for o in obiekty:
                x = float(o.geometry().asPoint().x())
                y = float(o.geometry().asPoint().y())
                p = QgsPointXY(x, y)
                punkty.append(p)
    
            dl = len(punkty)
            pole_koncowe = 0
            for e in range(dl):
                pole = 0
                a = (e + 1) % dl
                pole = (punkty[a].x() + punkty[e].x()) * (punkty[a].y() - punkty[e].y())
                pole_koncowe = pole_koncowe + pole
            POLE = abs(pole_koncowe/2)
            
            idt = []
            for e in range(dl):
                id_p = selected_features[e].id()
                idt.append(id_p)
            self.label_3_result_2.setText(f"{[i for i in idt]}")
            self.label_3_result.setText("pole obliczone, kliknij jednostkę wynikową")
            self.add_labels_to_layer(current_layer)
            return POLE
            
    def wyswietlanie_m2(self):
        pole = self.calculate_pole()
        self.label_3_result.setText(f" {pole:.3f} m2 ")
    def wyswietlanie_ha(self):
        pole = self.calculate_pole()
        self.label_3_result.setText(f" {pole/100000:.3f} ha")
    def wyswietlanie_ary(self):
        pole = self.calculate_pole()
        self.label_3_result.setText(f" {pole/100:.3f} ar")
    
    def clear_data(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        self.label_3_result.clear()
        self.label_3_result_2.clear()
        self.selected_features = []
        self.POLE = None
        self.d_h = None
        if current_layer is not None:
            current_layer.removeSelection()
            current_layer.triggerRepaint()
        self.current_layer = None
    
    def zakoncz_dzialanie(self):
        self.clear_data()
        self.close()
        
    def wyczysc_i_kontynuuj(self):
        self.clear_data()

    def add_labels_to_layer(self, layer):
        if layer.dataProvider().fieldNameIndex('id') == -1:
            layer.dataProvider().addAttributes([QgsField('id', QVariant.Int)])
            layer.updateFields()
        features = layer.getFeatures()
        layer.startEditing()
        for feature in features:
            feature['id'] = feature.id()
            layer.updateFeature(feature)
        layer.commitChanges()
    
        label_settings = QgsPalLayerSettings()
        label_settings.fieldName = 'id'
        label_settings.placement = QgsPalLayerSettings.AroundPoint
        label_settings.bufferDraw = True
        label_settings.bufferSize = 8
        label_settings.fontSizeInMapUnits = True
        label_settings.fontSize = 14 
    
        labeling = QgsVectorLayerSimpleLabeling(label_settings)
        layer.setLabeling(labeling)
        layer.setLabelsEnabled(True)
        layer.triggerRepaint()
    
        QgsProject.instance().addMapLayer(layer)